{"version":3,"sources":["components/Map.js","services/path.js","components/Toolbar.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Map","path","lon","lat","createPath","setFirstPoint","firstClick","reset","waypoints","map","useRef","useEffect","current","remove","addMap","L","polyline","color","weight","addTo","wp","addWaypoint","on","e","addFirstPoint","off","addPoint","setView","tileLayer","attribution","latlng","lng","coords","circleMarker","radius","fillOpacity","id","className","shortestPath","lon1","lat1","lon2","lat2","a","axios","get","res","data","Toolbar","len","resetPath","errorMsg","onClick","navigator","geolocation","getCurrentPosition","pos","longitude","latitude","Math","round","style","Loading","App","useState","setPath","setWaypoints","setLon","setLat","setLen","loading","setLoading","setFirstClick","setReset","setErrorMsg","toLon","toLat","Number","dist","Infinity","length","concat","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c028800.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport L from 'leaflet'\n\nconst Map = ({Â path, lon, lat, createPath, setFirstPoint, firstClick, reset, waypoints }) => {\n  let map = useRef(null)\n\n  useEffect(() => {\n    if (map.current) {\n      map.current.remove()\n    }\n    addMap()\n  }, [reset]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (path && map.current) {\n      L.polyline(path, {color: 'black', weight: 6}).addTo(map.current)\n      L.polyline(path, {color: 'white', weight: 5}).addTo(map.current)\n      L.polyline(path, {color: 'navy', weight: 3}).addTo(map.current)\n    }\n    for (let wp of waypoints) {\n      if (wp) {\n        addWaypoint(wp)\n      }\n    }\n  }, [path, waypoints])\n\n  useEffect(() => {\n    if (firstClick) {\n      map.current.on('click', (e) => addFirstPoint(e))\n    } else {\n      map.current.off('click')\n      map.current.on('click', (e) => addPoint(e))\n    }\n  }, [firstClick, lon, lat]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const addMap = () => {\n    map.current = L.map('map').setView([lat, lon], 14)\n    L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.png', {\n      attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> | Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\n    }).addTo(map.current)\n  }\n\n  const addPoint = (e) => {\n    createPath(e.latlng.lng, e.latlng.lat)\n  }\n\n  const addFirstPoint = (e) => {\n    setFirstPoint(e.latlng.lng, e.latlng.lat)\n    addWaypoint([e.latlng.lat, e.latlng.lng])\n  }\n\n  const addWaypoint = (coords) => {\n    L.circleMarker(coords, {radius: 6, color: 'black'}).addTo(map.current)\n    L.circleMarker(coords, {radius: 5, color: 'white'}).addTo(map.current)\n    L.circleMarker(coords, {radius: 4, color: 'navy', fillOpacity: 1}).addTo(map.current)\n  }\n\n  return (\n    <div id='map' className='mapElement' />\n  )\n}\n\nexport default Map","import axios from 'axios'\n\nconst baseUrl = '/api/path'\n\nexport const generatePath = async (lon, lat, length) => {\n  const res = await axios.get(`${baseUrl}/${lon}/${lat}/${length}`)\n  return res.data\n}\n\nexport const shortestPath = async (lon1, lat1, lon2, lat2) => {\n  const res = await axios.get(`${baseUrl}/${lon1}/${lat1}/${lon2}/${lat2}`)\n  return res.data\n}","import React from 'react'\n\nconst Toolbar = ({ len, resetPath, firstClick, setFirstPoint, errorMsg }) => {\n\n  const useCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      if (firstClick) {\n        setFirstPoint(pos.coords.longitude, pos.coords.latitude)\n      }\n    })\n  }\n\n  return (\n    <div>\n      <span className='toolbarSpan'>\n        Click on the map to select the \n        {firstClick ? \n        <> first location or \n        <button className='toolbarBtn' onClick={useCurrentLocation}>\n          use current location\n        </button></> : ' next location'\n      }\n        .\n      </span>\n      <br/>\n      <span className='toolbarSpan'>\n        Path length: {Math.round(len)} m\n        <button className='toolbarBtn' onClick={resetPath}>\n          Reset path\n        </button>\n      </span>\n      <p style={{color: 'red'}}>{errorMsg}</p>\n    </div>\n  )\n}\n\nexport default Toolbar","import React from 'react'\n\nconst Loading = () => (\n  <div className='mapElement'>\n    <h1 id='loadingText'>Generating path</h1>\n  </div>\n)\n\nexport default Loading","import React, { useState } from 'react'\nimport Map from './components/Map'\nimport { shortestPath } from './services/path'\nimport Toolbar from './components/Toolbar'\nimport Loading from './components/Loading'\n\nconst App = () => {\n  const [path, setPath] = useState([])\n  const [waypoints, setWaypoints] = useState([])\n  const [lon, setLon] = useState(22.2650)\n  const [lat, setLat] = useState(60.4520)\n  const [len, setLen] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [firstClick, setFirstClick] = useState(true)\n  const [reset, setReset] = useState(false)\n  const [errorMsg, setErrorMsg] = useState('')\n\n  const createPath = async (toLon, toLat) => {\n    setLoading(true)\n    const res = await shortestPath(lon, lat, toLon, toLat)\n    if (Number(res.dist) !== Infinity) {\n      if (waypoints.length === 0) {\n        setWaypoints([res.path[0], res.path[res.path.length - 1]])\n      } else {\n        setWaypoints(waypoints.concat([res.path[res.path.length - 1]]))\n      }\n      setPath(path.concat(res.path))\n      setLen(len + Number(res.dist))\n      setLon(toLon)\n      setLat(toLat)\n    } else {\n      setErrorMsg('Error: could not find a path.')\n      setTimeout(() => {\n        setErrorMsg('')\n      }, 5000);\n    }\n    setLoading(false)\n  }\n\n  const setFirstPoint = (toLon, toLat) => {\n    setFirstClick(false)\n    setLon(toLon)\n    setLat(toLat)\n  }\n\n  const resetPath = () => {\n    setFirstClick(true)\n    setPath([])\n    setWaypoints([])\n    setLen(0)\n    setReset(!reset)\n  }\n\n  return (\n    <div className=\"App\">\n      <div id='topDiv'>\n        <h1 id='title'>Shortest path finder</h1>\n        <Toolbar len={len} resetPath={resetPath} firstClick={firstClick} \n          setFirstPoint={setFirstPoint} errorMsg={errorMsg} />\n      </div>\n      {loading\n        ? <Loading />\n        : <Map path={path} lon={lon} lat={lat} createPath={createPath}\n         setFirstPoint={setFirstPoint} firstClick={firstClick} reset={reset}\n         waypoints={waypoints}/>\n      }\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}